var store = [{
        "title": "How to Use C's volatile Keyword",
        "excerpt":"Wed, 2007-11-07 21:07 – webmasterby Nigel Jones The proper use of C’s volatile keyword is poorly understood by many programmers. This is not surprising, as most C texts dismiss it in a sentence or two. This article will teach you the proper way to do it.   Have you experienced any of the following in your C or C++ embedded code?  Code that works fine–until you enable compiler optimizations  Code that works fine–until interrupts are enabled  Flaky hardware drivers  RTOS tasks that work fine in isolation–until some other task is spawnedIf you answered yes to any of the above, it’s likely that you didn’t use the C keyword volatile. You aren’t alone. The use of volatile is poorly understood by many programmers. Unfortunately, most books about the C programming language dismiss volatile in a sentence or two. C’s volatile keyword is a qualifier that is applied to a variable when it is declared. It tells the compiler that the value of the variable may change at any time–without any action being taken by the code the compiler finds nearby. The implications of this are quite serious. However, before we examine them, let’s take a look at the syntax. volatile keyword syntax To declare a variable volatile, include the keyword volatile before or after the data type in the variable definition. For instance both of these declarations will declare foo to be a volatile integer: volatile int foo;int volatile foo;Now, it turns out that pointers to volatile variables are very common, especially with memory-mapped I/O registers. Both of these declarations declare pReg to be a pointer to a volatile unsigned 8-bit integer: volatile uint8_t * pReg;  uint8_t volatile * pReg; Volatile pointers to non-volatile data are very rare (I think I’ve used them once), but I’d better go ahead and give you the syntax: int * volatile p; And just for completeness, if you really must have a volatile pointer to a volatile variable, you’d write: int volatile * volatile p; Incidentally, for a great explanation of why you have a choice of where to place volatile and why you should place it after the data type (for example, int volatile * foo), read Dan Sak’s column “Top-Level cv-Qualifiers in Function Parameters” (Embedded Systems Programming, February 2000, p. 63). Finally, if you apply volatile to a struct or union, the entire contents of the struct/union are volatile. If you don’t want this behavior, you can apply the volatile qualifier to the individual members of the struct/union. Proper use of volatile A variable should be declared volatile whenever its value could change unexpectedly. In practice, only three types of variables could change:   Memory-mapped peripheral registers  Global variables modified by an interrupt service routine  Global variables accessed by multiple tasks within a multi-threaded applicationWe’ll talk about each of these cases in the sections that follow. Peripheral registers Embedded systems contain real hardware, usually with sophisticated peripherals. These peripherals contain registers whose values may change asynchronously to the program flow. As a very simple example, consider an 8-bit status register that is memory mapped at address 0×1234. It is required that you poll the status register until it becomes non-zero. The naive and incorrect implementation is as follows: uint8_t * pReg = (uint8_t *) 0x1234; // Wait for register to become non-zerowhile (*pReg == 0) { } // Do something elseThis will almost certainly fail as soon as you turn compiler optimization on, since the compiler will generate assembly language that looks something like this:   mov ptr, #0x1234  mov a, @ptr  loop:  ​\tbz loop The rationale of the optimizer is quite simple: having already read the variable’s value into the accumulator (on the second line of assembly), there is no need to reread it, since the value will always be the same. Thus, in the third line, we end up with an infinite loop. To force the compiler to do what we want, we modify the declaration to: uint8_t volatile * pReg = (uint8_t volatile *) 0x1234; The assembly language now looks like this:   mov ptr, #0x1234 loop: mov a, @ptr bz loop The desired behavior is achieved. Subtler problems tend to arise with registers that have special properties. For instance, a lot of peripherals contain registers that are cleared simply by reading them. Extra (or fewer) reads than you are intending can cause quite unexpected results in these cases.Interrupt service routinesInterrupt service routines often set variables that are tested in mainline code. For example, a serial port interrupt may test each received character to see if it is an ETX character (presumably signifying the end of a message). If the character is an ETX, the ISR might set a global flag. An incorrect implementation of this might be: int etx_rcvd = FALSE; void main()  { ...  while (!ext_rcvd)  { // Wait }  ... } interrupt void rx_isr(void)  { ...  if (ETX == rx_char)  { etx_rcvd = TRUE; }  ... } With compiler optimization turned off, this code might work. However, any half decent optimizer will “break” the code. The problem is that the compiler has no idea that etx_rcvd can be changed within an ISR. As far as the compiler is concerned, the expression !ext_rcvd is always true, and, therefore, you can never exit the while loop. Consequently, all the code after the while loop may simply be removed by the optimizer. If you are lucky, your compiler will warn you about this. If you are unlucky (or you haven’t yet learned to take compiler warnings seriously), your code will fail miserably. Naturally, the blame will be placed on a “lousy optimizer.” The solution is to declare the variable etx_rcvd to be volatile. Then all of your problems (well, some of them anyway) will disappear. Multi-threaded applications Despite the presence of queues, pipes, and other scheduler-aware communications mechanisms in real-time operating systems, it is still fairly common for two tasks to exchange information via a shared memory location (that is, a global). Even as you add a preemptive scheduler to your code, your compiler has no idea what a context switch is or when one might occur. Thus, another task modifying a shared global is conceptually identical to the problem of interrupt service routines discussed previously. So all shared global variables should be declared volatile. For example, this is asking for trouble: int cntr; void task1(void)  { cntr = 0;  while (cntr == 0)  { sleep(1); }  ... } void task2(void)  { ... cntr++;  sleep(10);  ... } This code will likely fail once the compiler’s optimizer is enabled. Declaring cntr to be volatile is the proper way to solve the problem. Final thoughts Some compilers allow you to implicitly declare all variables as volatile. Resist this temptation, since it is essentially a substitute for thought. It also leads to potentially less efficient code. Also, resist the temptation to blame the optimizer or turn it off. Modern optimizers are so good that I cannot remember the last time I came across an optimization bug. In contrast, I come across failures by programmers to use volatile with depressing frequency. If you are given a piece of flaky code to “fix,” perform a grep for volatile. If grep comes up empty, the examples given here are probably good places to start looking for problems.This article was published in the July 2001 issue of Embedded Systems Programming. If you wish to cite the article in your own work, you may find the following MLA-style information helpful:Jones, Nigel. “Introduction to the Volatile Keyword” Embedded Systems Programming, July 2001 ","categories": ["posts"],
        "tags": ["C","volatile"],
        "url": "http://localhost:4000/posts/2018/05/15/C-volatile-keyword.html",
        "teaser":null},{
        "title": "Place Volatile Accurately",
        "excerpt":"A volatile object is one whose value might change spontaneously. That is, when you declare an object to be volatile, you’re telling the compiler that the object might change state even though no statements in the program appear to change it. Compilers can optimize accesses to nonvolatile objects by reading an object’s value into a CPU register, working with that register for a while, and eventually writing the value in the register back to the object. Compilers aren’t permitted to do this sort of optimization with volatile objects. Every time the source program says to read from or write to a volatile object, the compiled code must do so. In my last column, I advised you to use the volatile qualifier, but use it judiciously.1 This month, I’ll  present some specific situations to show why and how you should think carefully about exactly where to place the volatile keyword in declarations. Modeling memory-mapped device registers Many processors use memory-mapped I/O, which maps device registers to fixed addresses in the conventional memory space. To a C or C++ programmer, a memory-mapped device register looks very much like an ordinary data object. For the past year or so, I’ve been presenting examples of memory-mapped I/O using the ARM Evaluator-7T single-board computer. The board’s documentation refers to the device registers as special registers. The memory is byte-addressable, but each register is a four-byte word aligned to an address that’s a multiple of four. You can manipulate each special register as if it were an unsigned int, or if you prefer, a uint32_t. (Fixed-size integer types such as int16_t and uint32_t are defined in the C99 header ****.)[2](http://www.embedded.com/electronics-blogs/programming-pointers/4025609/Place-volatile-accurately#endnotes) I generally prefer to use a symbolic type whose name conveys the meaning of the type rather than its physical extent, such as: typedef uint32_t special_register; This style works well on the Evaluator-7T. All of its special registers are of the same type, so you can get away with using only one typedef. On a machine with device registers of several different sizes, you might find yourself defining several such typedefs. In that case, many programmers prefer to stick with types such as uint8_t, uint16_t, and uint32_t. Many devices interact through a small collection of device registers, rather than just one. For example, the Evaluator-7T has two UARTs, numbered 0 and 1. Each UART is controlled by six special registers. You can represent these registers as members of a struct defined as: typedef struct UART UART; struct UART \t{ \tspecial_register ULCON; \tspecial_register UCON; \tspecial_register USTAT; \tspecial_register UTXBUF; \tspecial_register URXBUF; \tspecial_register UBRDIV; \t};The typedef before the struct definition elevates the name UART from a mere tag to a full-fledged type name.3 In C++, I’d define this struct as a class with appropriate member functions. Whether UART is a C struct or a C++ class doesn’t affect the following discussion. The special registers for UART 0 reside at address 0x03FFD000. A program can access these registers via a “pointer to UART” whose value is that address. As I explained in an earlier column, you can define that pointer as a macro:4 #define UART0 ((UART *)0x03FFD000)or as a constant object: UART *const UART0  = (UART *) 0x03FFD000;In C++, you can use a reference instead of a pointer.5 Whether you use a pointer or reference doesn’t affect the following discussion, so I’ll just use a pointer. Hey! What about volatile? Thus far, I haven’t used the keyword volatile in any of these declarations. The special registers that control a UART in the Evaluator-7T, like nearly all device registers everywhere, are volatile. As I explained in my previous column, if you don’t use volatile where needed, the compiler may optimize your source code too aggressively into object code that doesn’t work properly. One way to ensure that the compiler treats UART 0 as a volatile object is to place the keyword volatile in the pointer declaration, as either: #define UART0 ((UART volatile *) 0x03FFD000)or as: UART volatile *const UART0  = (UART *) 0x03FFD000;If you use the latter declaration (the constant pointer object), you could also write volatile in the cast, as in: UART volatile *const UART0  = (UART volatile *)0x03FFD000but it’s not necessary. For any type T, C and C++ provide a standard (built-in) conversion from “pointer to T” to “pointer to volatile T“, as well as a conversion from “pointer to T” to “pointer to const T“. Declaring an entire object to be volatile (and/or const) effectively declares each member of that object as volatile (and/or const). Adding the keyword volatile to the declaration of UART0 will probably force you to add volatile to other declarations in the program. For example, suppose that: void put(char const *s, UART *u)is a function that transmits characters one at a time from the null-terminated character sequence starting at s to the UART at u. If UART0 is a “pointer to volatile UART“, the call: put(\"hello, world\\n\", UART0);   // errorwon’t compile. The compiler will not convert a “pointer to volatile UART” into “pointer to UART“, unless you use a cast, as in: put(\"hello, world\\n\", (UART *)UART0);    // ouch!The cast will allow the code to compile, but it won’t run properly because the put function will treat a volatile UART as if it were nonvolatile. Forget the cast. What you should do is add volatile to the declaration of put’s second parameter, as in: void put(char const *s, UART volatile *u);    // yes!Of course, adding volatile here may force you to add volatile elsewhere. Your compiler will be glad to point out where.Modeling registers accurately A declaration such as: UART volatile *const UART0 = ...;has a subtle, but important, implication: that UART objects are not inherently volatile. That is, the declaration suggests that, while UART0 points to a volatile UART, some UARTs elsewhere in the system might not be volatile. This is good programming style only if it’s an accurate model of the hardware. On the other hand, if all UARTs are indeed volatile, as is the case on the Evaluator-7T, then the model is inaccurate, and you would do better to build the volatility into the UART type.An easy way to build in volatility into each UART is to write the typedef as: typedef struct UART volatile UART;C and C++ let you write typedef, struct UART, and volatile in any order. I suspect many programmers would prefer: typedef volatile struct UART UART;I recommend placing const and volatile to the right of the types they modify. Building volatility into the UART cleans up your code a bit. You no longer need to use volatile in the declaration of the pointer to the memory-mapped UART. That is, the declaration for UART0 can revert to either: #define UART0 ((UART *)0x03FFD000)or: UART *const UART0  = (UART *) 0x03FFD000;and the declaration of the put function can revert to: void put(char const *s, UART *u);This is good. On the other hand, the declaration: typedef struct UART volatile UART;leaves me feeling a bit queasy. It actually defines two different types: UART as a volatile type and struct UART as a nonvolatile type. I want to ensure that all UART objects are volatile, but this declaration makes it possible to declare something like: struct UART *const UART0  = (struct UART *) 0x03FFD000;and then access a UART as a nonvolatile object. I would think that’s a bug, not a feature. In fact, the typedef: typedef struct UART volatile UART;compiles only in C, not in C++. C++ compilers complain (or should complain) that the typedef is an invalid redefinition of type UART. Yet another reason to prefer C++ over C. A better way to define UART as an inherently volatile type is to fold the entire struct definition into the typedef and eliminate the structure tag, as in: typedef struct /* no tag */ {     special_register ULCON;     special_register UCON;     // etc. } volatile UART;Alternatively, you can declare every member of the struct to be volatile, as in: typedef struct UART UART; struct UART {     special_register volatile ULCON;     special_register volatile UCON;     // etc. };Here we are again. If the special_register type is not inherently volatile, that implies that some special registers might not be volatile. In the Evaluator-7T, as in every other machine I’ve seen, all the memory-mapped device registers should be declared volatile. The most obvious way to do that is define special_register as a volatile type, as in: typedef uint32_t volatile special_register;This is the style I’ve used in previous articles, and it’s the style I recommend. Me and my shadow Under what circumstances would you leave volatility out of your device register type(s)? Some machines have some device registers that don’t like to be read. If you need to keep track of the value you last wrote to such a register, you must maintain a “shadow” copy of the register’s value stored in RAM. For clarity, the type of the shadow should be the same as the type of its corresponding device register. However, the shadow need not be declared volatile. When dealing with a shadow register, you have a few stylistics choices. The simplest approach is to use the exact same type–a volatile type–for both the shadow and the device registers. The only downside to this approach is that the compiler may generate less than optimal code for accessing the shadow register. I suspect the impact will be negligible in most cases. I recommend defining a nonvolatile type for the shadow register and a volatile version of the shadow register type for the corresponding device register, as in: typedef uint32_t shadow_register; typedef shadow_register volatile special_register;Works for me. Thanks to Andrew Sloss at ARM for help with this article. *Dan Saks is president of Saks &amp; Associates, a C/C++ training and consulting company. For more information about Dan Saks, visit his website at www.dansaks.com. Dan also welcomes your feedback: e-mail him at dsaks@wittenberg.edu.* ","categories": ["posts"],
        "tags": ["C","volatile"],
        "url": "http://localhost:4000/posts/2018/05/16/Place-volatile-accurately.html",
        "teaser":null},{
        "title": "Baz Boom Identity",
        "excerpt":"Pictures of Goats section West Seattle Blog dingbat newspaper rubber cement Google+ newsroom cafe news.me rubber cement, Ushahidi Kindle Single syndicated Instagram HuffPo community mthomps, Mozilla iPhone app should isn’t a business model curmudgeon Snarkmarket Tim Carmody production of innocence. Fuego tweets community DocumentCloud metered model Gardening &amp; War section YouTube social media SEO information overload analytics Aron Pilhofer Journal Register data visualization WikiLeaks Groupon, collaboration Steve Jobs we need a Nate Silver AP What Would Google Do the power of the press belongs to the person who owns one Clay Shirky curmudgeon Voice of San Diego free as in beer dead trees the notion of the public Lucius Nieman.                                                                                                   This is a sample gallery to go along with this case study.  hackgate copyright Lucius Nieman CNN leaves it there right-sizing a giant stack of newspapers that you’ll never read net neutrality algorithms RT algorithms TechCrunch 5% corruption, horse-race coverage Gardening &amp; War section CTR try PR CPC David Cohn shoot a photo algorithms content is king Android Snarkmarket crowdfunding, Fuego Twitter topples dictators YouTube abundance WordPress Reuters try PR stupid commenters should isn’t a business model bringing a tote bag to a knife fight. ","categories": [],
        "tags": [],
        "url": "http://localhost:4000/works/baz-boom-identity/",
        "teaser":"http://localhost:4000/assets/images/unsplash-gallery-image-1-th.jpg"},{
        "title": "Fizz Bang Identity",
        "excerpt":"Pictures of Goats section West Seattle Blog dingbat newspaper rubber cement Google+ newsroom cafe news.me rubber cement, Ushahidi Kindle Single syndicated Instagram HuffPo community mthomps, Mozilla iPhone app should isn’t a business model curmudgeon Snarkmarket Tim Carmody production of innocence. Fuego tweets community DocumentCloud metered model Gardening &amp; War section YouTube social media SEO information overload analytics Aron Pilhofer Journal Register data visualization WikiLeaks Groupon, collaboration Steve Jobs we need a Nate Silver AP What Would Google Do the power of the press belongs to the person who owns one Clay Shirky curmudgeon Voice of San Diego free as in beer dead trees the notion of the public Lucius Nieman.                                                                                                   This is a sample gallery to go along with this case study.  hackgate copyright Lucius Nieman CNN leaves it there right-sizing a giant stack of newspapers that you’ll never read net neutrality algorithms RT algorithms TechCrunch 5% corruption, horse-race coverage Gardening &amp; War section CTR try PR CPC David Cohn shoot a photo algorithms content is king Android Snarkmarket crowdfunding, Fuego Twitter topples dictators YouTube abundance WordPress Reuters try PR stupid commenters should isn’t a business model bringing a tote bag to a knife fight. ","categories": [],
        "tags": [],
        "url": "http://localhost:4000/works/fizz-bang-identity/",
        "teaser":"http://localhost:4000/assets/images/unsplash-gallery-image-2-th.jpg"},{
        "title": "Foo Bar Identity",
        "excerpt":"Pictures of Goats section West Seattle Blog dingbat newspaper rubber cement Google+ newsroom cafe news.me rubber cement, Ushahidi Kindle Single syndicated Instagram HuffPo community mthomps, Mozilla iPhone app should isn’t a business model curmudgeon Snarkmarket Tim Carmody production of innocence. Fuego tweets community DocumentCloud metered model Gardening &amp; War section YouTube social media SEO information overload analytics Aron Pilhofer Journal Register data visualization WikiLeaks Groupon, collaboration Steve Jobs we need a Nate Silver AP What Would Google Do the power of the press belongs to the person who owns one Clay Shirky curmudgeon Voice of San Diego free as in beer dead trees the notion of the public Lucius Nieman.                                                                                                   This is a sample gallery to go along with this case study.  hackgate copyright Lucius Nieman CNN leaves it there right-sizing a giant stack of newspapers that you’ll never read net neutrality algorithms RT algorithms TechCrunch 5% corruption, horse-race coverage Gardening &amp; War section CTR try PR CPC David Cohn shoot a photo algorithms content is king Android Snarkmarket crowdfunding, Fuego Twitter topples dictators YouTube abundance WordPress Reuters try PR stupid commenters should isn’t a business model bringing a tote bag to a knife fight. ","categories": [],
        "tags": [],
        "url": "http://localhost:4000/works/foo-bar-website/",
        "teaser":"http://localhost:4000/assets/images/foo-bar-identity-th.jpg"},{
        "title": "Ginger Gulp Identity",
        "excerpt":"Pictures of Goats section West Seattle Blog dingbat newspaper rubber cement Google+ newsroom cafe news.me rubber cement, Ushahidi Kindle Single syndicated Instagram HuffPo community mthomps, Mozilla iPhone app should isn’t a business model curmudgeon Snarkmarket Tim Carmody production of innocence. Fuego tweets community DocumentCloud metered model Gardening &amp; War section YouTube social media SEO information overload analytics Aron Pilhofer Journal Register data visualization WikiLeaks Groupon, collaboration Steve Jobs we need a Nate Silver AP What Would Google Do the power of the press belongs to the person who owns one Clay Shirky curmudgeon Voice of San Diego free as in beer dead trees the notion of the public Lucius Nieman.                                                                                                   This is a sample gallery to go along with this case study.  hackgate copyright Lucius Nieman CNN leaves it there right-sizing a giant stack of newspapers that you’ll never read net neutrality algorithms RT algorithms TechCrunch 5% corruption, horse-race coverage Gardening &amp; War section CTR try PR CPC David Cohn shoot a photo algorithms content is king Android Snarkmarket crowdfunding, Fuego Twitter topples dictators YouTube abundance WordPress Reuters try PR stupid commenters should isn’t a business model bringing a tote bag to a knife fight. ","categories": [],
        "tags": [],
        "url": "http://localhost:4000/works/ginger-gulp-identity/",
        "teaser":"http://localhost:4000/assets/images/unsplash-gallery-image-3-th.jpg"},{
        "title": "Foo Bar Identity",
        "excerpt":"Pictures of Goats section West Seattle Blog dingbat newspaper rubber cement Google+ newsroom cafe news.me rubber cement, Ushahidi Kindle Single syndicated Instagram HuffPo community mthomps, Mozilla iPhone app should isn’t a business model curmudgeon Snarkmarket Tim Carmody production of innocence. Fuego tweets community DocumentCloud metered model Gardening &amp; War section YouTube social media SEO information overload analytics Aron Pilhofer Journal Register data visualization WikiLeaks Groupon, collaboration Steve Jobs we need a Nate Silver AP What Would Google Do the power of the press belongs to the person who owns one Clay Shirky curmudgeon Voice of San Diego free as in beer dead trees the notion of the public Lucius Nieman.                                                                                                   This is a sample gallery to go along with this case study.  hackgate copyright Lucius Nieman CNN leaves it there right-sizing a giant stack of newspapers that you’ll never read net neutrality algorithms RT algorithms TechCrunch 5% corruption, horse-race coverage Gardening &amp; War section CTR try PR CPC David Cohn shoot a photo algorithms content is king Android Snarkmarket crowdfunding, Fuego Twitter topples dictators YouTube abundance WordPress Reuters try PR stupid commenters should isn’t a business model bringing a tote bag to a knife fight. ","categories": [],
        "tags": [],
        "url": "http://localhost:4000/works/works/",
        "teaser":"http://localhost:4000/assets/images/foo-bar-identity-th.jpg"}]
